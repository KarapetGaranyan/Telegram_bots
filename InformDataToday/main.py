import telebot
import datetime
import time
import threading
import random
import requests
import json
import os
import uuid

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –±–æ—Ç–∞
bot = telebot.TeleBot("8142649834:AAENOiHRChIQNdPRomnkF_iecHiVIjk0jmA")
OWM_API_KEY = 'e3b72acefafea8565fbf86b756297d0f'

# –§–∞–π–ª—ã –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
TASKS_FILE = "user_tasks.json"
REMINDERS_FILE = "user_reminders.json"
RECURRING_FILE = "user_recurring.json"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
reminder_threads = {}


# === –í–°–ü–û–ú–û–ì–ê–¢–ï–õ–¨–ù–´–ï –§–£–ù–ö–¶–ò–ò ===

def load_json_file(filename):
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –∏–∑ JSON —Ñ–∞–π–ª–∞"""
    if os.path.exists(filename):
        try:
            with open(filename, 'r', encoding='utf-8') as f:
                return json.load(f)
        except:
            return {}
    return {}


def save_json_file(filename, data):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–∞–Ω–Ω—ã–µ –≤ JSON —Ñ–∞–π–ª"""
    try:
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è {filename}: {e}")


def parse_datetime_string(date_str, time_str):
    """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫–∏ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏ –≤ datetime –æ–±—ä–µ–∫—Ç"""
    try:
        now = datetime.datetime.now()

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Å–æ–±—ã—Ö —Å–ª–æ–≤
        if date_str.lower() == "—Å–µ–≥–æ–¥–Ω—è":
            target_date = now.date()
        elif date_str.lower() == "–∑–∞–≤—Ç—Ä–∞":
            target_date = (now + datetime.timedelta(days=1)).date()
        else:
            # –§–æ—Ä–º–∞—Ç—ã –¥–∞—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
            date_formats = ["%Y-%m-%d", "%d.%m.%Y", "%d/%m/%Y"]
            target_date = None

            for fmt in date_formats:
                try:
                    parsed = datetime.datetime.strptime(date_str, fmt)
                    target_date = parsed.date()
                    break
                except ValueError:
                    continue

            if not target_date:
                return None

        # –ü–∞—Ä—Å–∏–Ω–≥ –≤—Ä–µ–º–µ–Ω–∏
        try:
            time_obj = datetime.datetime.strptime(time_str, "%H:%M").time()
        except ValueError:
            return None

        # –û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º–µ–Ω–∏
        result = datetime.datetime.combine(target_date, time_obj)
        return result

    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ –¥–∞—Ç—ã: {e}")
        return None


def safe_send_message(chat_id, text, parse_mode=None):
    """–ë–µ–∑–æ–ø–∞—Å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
    try:
        bot.send_message(chat_id, text, parse_mode=parse_mode)
        return True
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ó–ê–î–ê–ß ===

def get_user_tasks(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_tasks = load_json_file(TASKS_FILE)
    return all_tasks.get(str(user_id), [])


def save_user_tasks(user_id, tasks):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –∑–∞–¥–∞—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_tasks = load_json_file(TASKS_FILE)
    all_tasks[str(user_id)] = tasks
    save_json_file(TASKS_FILE, all_tasks)


# === –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===

def get_user_reminders(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_reminders = load_json_file(REMINDERS_FILE)
    return all_reminders.get(str(user_id), [])


def save_user_reminders(user_id, reminders):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_reminders = load_json_file(REMINDERS_FILE)
    all_reminders[str(user_id)] = reminders
    save_json_file(REMINDERS_FILE, all_reminders)


def get_user_recurring(user_id):
    """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_recurring = load_json_file(RECURRING_FILE)
    return all_recurring.get(str(user_id), [])


def save_user_recurring(user_id, recurring):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    all_recurring = load_json_file(RECURRING_FILE)
    all_recurring[str(user_id)] = recurring
    save_json_file(RECURRING_FILE, all_recurring)


# === –°–ò–°–¢–ï–ú–ê –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===

def reminder_loop(user_id):
    """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π"""
    print(f"[INFO] –ó–∞–ø—É—â–µ–Ω –ø–æ—Ç–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
    sent_today = set()

    while True:
        try:
            now = datetime.datetime.now()
            current_datetime = now.strftime("%Y-%m-%d %H:%M")
            current_date = now.strftime("%Y-%m-%d")
            current_time = now.strftime("%H:%M")
            current_weekday = now.strftime("%A").lower()

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–∑–æ–≤—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            reminders = get_user_reminders(user_id)
            updated_reminders = []

            for reminder in reminders:
                if reminder.get('datetime') == current_datetime:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
                    message = f"‚è∞ *–ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï*\n\nüí¨ {reminder['text']}"
                    if safe_send_message(user_id, message, 'Markdown'):
                        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}")
                    # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –≤ updated_reminders - —É–¥–∞–ª—è–µ–º
                else:
                    updated_reminders.append(reminder)

            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –µ—Å–ª–∏ —á—Ç–æ-—Ç–æ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å
            if len(updated_reminders) != len(reminders):
                save_user_reminders(user_id, updated_reminders)

            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
            recurring = get_user_recurring(user_id)
            for reminder in recurring:
                if not reminder.get('active', True):
                    continue

                reminder_key = f"{reminder['id']}_{current_date}"
                if reminder_key in sent_today:
                    continue

                should_send = False

                if reminder['type'] == 'daily':
                    if current_time == reminder['time']:
                        should_send = True
                elif reminder['type'] == 'weekly':
                    if (current_weekday == reminder['day_of_week'] and
                            current_time == reminder['time']):
                        should_send = True

                if should_send:
                    message = f"üîÑ *–†–ï–ì–£–õ–Ø–†–ù–û–ï –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ï*\n\nüí¨ {reminder['text']}"
                    if safe_send_message(user_id, message, 'Markdown'):
                        sent_today.add(reminder_key)
                        print(f"[INFO] –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {reminder['text']}")

            # –û—á–∏—Å—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –≤ –ø–æ–ª–Ω–æ—á—å
            if current_time == "00:00":
                sent_today.clear()

        except Exception as e:
            print(f"[ERROR] –û—à–∏–±–∫–∞ –≤ —Ü–∏–∫–ª–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π: {e}")

        # –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥
        time.sleep(30)


def start_reminder_thread(user_id):
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–æ—Ç–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    global reminder_threads

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –ø–æ—Ç–æ–∫
    if user_id in reminder_threads:
        if reminder_threads[user_id].is_alive():
            return False

    # –°–æ–∑–¥–∞–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –Ω–æ–≤—ã–π –ø–æ—Ç–æ–∫
    thread = threading.Thread(target=reminder_loop, args=(user_id,), daemon=True)
    thread.start()
    reminder_threads[user_id] = thread
    return True


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–û–ú–ê–ù–î ===

@bot.message_handler(commands=['start'])
def handle_start(message):
    user_id = message.from_user.id
    start_reminder_thread(user_id)

    welcome_text = """üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!

–Ø –≤–∞—à –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è:
‚Ä¢ –£–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∞–º–∏
‚Ä¢ –°–æ–∑–¥–∞–Ω–∏—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π  
‚Ä¢ –ü–æ–ª—É—á–µ–Ω–∏—è —Ñ–∞–∫—Ç–æ–≤ –æ –∑–¥–æ—Ä–æ–≤—å–µ
‚Ä¢ –ü—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–≥–æ–¥—ã

–í–≤–µ–¥–∏—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥."""

    bot.reply_to(message, welcome_text)


@bot.message_handler(commands=['help'])
def handle_help(message):
    help_text = """ü§ñ *–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*

üìù *–ó–∞–¥–∞—á–∏:*
/add\\_task [—Ç–µ–∫—Å—Ç] - –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É
/tasks - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –∑–∞–¥–∞—á–∏
/done [–Ω–æ–º–µ—Ä] - –û—Ç–º–µ—Ç–∏—Ç—å –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–æ–π
/del\\_task [–Ω–æ–º–µ—Ä] - –£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É

‚è∞ *–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*
/remind [–¥–∞—Ç–∞] [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –°–æ–∑–¥–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/reminders - –ü–æ–∫–∞–∑–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
/test - –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ

üîÑ *–†–µ–≥—É–ª—è—Ä–Ω—ã–µ:*
/daily [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
/weekly [–¥–µ–Ω—å] [–≤—Ä–µ–º—è] [—Ç–µ–∫—Å—Ç] - –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ
/recurring - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ

üå§Ô∏è *–î—Ä—É–≥–æ–µ:*
/fact - –§–∞–∫—Ç –æ –∑–¥–æ—Ä–æ–≤—å–µ
/weather - –ü–æ–≥–æ–¥–∞

*–ü—Ä–∏–º–µ—Ä—ã:*
`/remind —Å–µ–≥–æ–¥–Ω—è 15:30 –í—Å—Ç—Ä–µ—á–∞ —Å –≤—Ä–∞—á–æ–º`
`/daily 08:00 –£—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞`
`/weekly monday 09:00 –ü–ª–∞–Ω–µ—Ä–∫–∞`"""

    bot.send_message(message.chat.id, help_text, parse_mode='Markdown')


# === –ö–û–ú–ê–ù–î–´ –ó–ê–î–ê–ß ===

@bot.message_handler(commands=['add_task'])
def handle_add_task(message):
    try:
        task_text = message.text.split('/add_task', 1)[1].strip()
        if not task_text:
            bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏\n–ü—Ä–∏–º–µ—Ä: /add_task –ö—É–ø–∏—Ç—å –ø—Ä–æ–¥—É–∫—Ç—ã")
            return

        user_id = message.from_user.id
        tasks = get_user_tasks(user_id)

        new_task = {
            'id': len(tasks) + 1,
            'text': task_text,
            'done': False,
            'created': datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        tasks.append(new_task)
        save_user_tasks(user_id, tasks)

        bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞: {task_text}")

    except IndexError:
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏")
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏")


@bot.message_handler(commands=['tasks'])
def handle_tasks(message):
    user_id = message.from_user.id
    tasks = get_user_tasks(user_id)

    if not tasks:
        bot.reply_to(message, "üìù –£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á")
        return

    text = "üìã *–í–∞—à–∏ –∑–∞–¥–∞—á–∏:*\n\n"
    for task in tasks:
        status = "‚úÖ" if task['done'] else "‚è≥"
        text += f"{task['id']}. {status} {task['text']}\n"

    bot.reply_to(message, text, parse_mode='Markdown')


@bot.message_handler(commands=['done'])
def handle_done_task(message):
    try:
        task_id = int(message.text.split()[1])
        user_id = message.from_user.id
        tasks = get_user_tasks(user_id)

        for task in tasks:
            if task['id'] == task_id:
                task['done'] = True
                save_user_tasks(user_id, tasks)
                bot.reply_to(message, f"‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞: {task['text']}")
                return

        bot.reply_to(message, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏\n–ü—Ä–∏–º–µ—Ä: /done 1")
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞")


@bot.message_handler(commands=['del_task'])
def handle_delete_task(message):
    try:
        task_id = int(message.text.split()[1])
        user_id = message.from_user.id
        tasks = get_user_tasks(user_id)

        for i, task in enumerate(tasks):
            if task['id'] == task_id:
                deleted_task = tasks.pop(i)
                # –ü–µ—Ä–µ–Ω—É–º–µ—Ä–æ–≤—ã–≤–∞–µ–º –æ—Å—Ç–∞–≤—à–∏–µ—Å—è –∑–∞–¥–∞—á–∏
                for j, remaining_task in enumerate(tasks):
                    remaining_task['id'] = j + 1
                save_user_tasks(user_id, tasks)
                bot.reply_to(message, f"üóëÔ∏è –ó–∞–¥–∞—á–∞ —É–¥–∞–ª–µ–Ω–∞: {deleted_task['text']}")
                return

        bot.reply_to(message, "‚ùå –ó–∞–¥–∞—á–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    except (IndexError, ValueError):
        bot.reply_to(message, "‚ùå –£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –∑–∞–¥–∞—á–∏\n–ü—Ä–∏–º–µ—Ä: /del_task 1")
    except Exception as e:
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞")


# === –ö–û–ú–ê–ù–î–´ –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===

@bot.message_handler(commands=['remind'])
def handle_remind(message):
    try:
        parts = message.text.split(' ', 3)
        if len(parts) < 4:
            bot.reply_to(message, """‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç

*–ü—Ä–∏–º–µ—Ä—ã:*
`/remind —Å–µ–≥–æ–¥–Ω—è 15:30 –í—Å—Ç—Ä–µ—á–∞`
`/remind –∑–∞–≤—Ç—Ä–∞ 09:00 –í—Ä–∞—á`
`/remind 2025-12-31 23:59 –ù–æ–≤—ã–π –≥–æ–¥`""", parse_mode='Markdown')
            return

        date_str = parts[1]
        time_str = parts[2]
        text = parts[3]

        # –ü–∞—Ä—Å–∏–º –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        reminder_datetime = parse_datetime_string(date_str, time_str)
        if not reminder_datetime:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã –∏–ª–∏ –≤—Ä–µ–º–µ–Ω–∏")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Ä–µ–º—è –≤ –±—É–¥—É—â–µ–º
        if reminder_datetime <= datetime.datetime.now():
            bot.reply_to(message, "‚ùå –í—Ä–µ–º—è –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –≤ –±—É–¥—É—â–µ–º")
            return

        user_id = message.from_user.id
        start_reminder_thread(user_id)

        # –°–æ–∑–¥–∞–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        reminder = {
            'id': str(uuid.uuid4())[:8],
            'datetime': reminder_datetime.strftime("%Y-%m-%d %H:%M"),
            'text': text,
            'created': datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        reminders = get_user_reminders(user_id)
        reminders.append(reminder)
        save_user_reminders(user_id, reminders)

        formatted_time = reminder_datetime.strftime("%d.%m.%Y –≤ %H:%M")
        bot.reply_to(message, f"‚úÖ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüìÖ {formatted_time}\nüí¨ {text}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['test'])
def handle_test_reminder(message):
    try:
        user_id = message.from_user.id
        start_reminder_thread(user_id)

        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É
        test_time = datetime.datetime.now() + datetime.timedelta(minutes=1)

        reminder = {
            'id': str(uuid.uuid4())[:8],
            'datetime': test_time.strftime("%Y-%m-%d %H:%M"),
            'text': "üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç!",
            'created': datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        reminders = get_user_reminders(user_id)
        reminders.append(reminder)
        save_user_reminders(user_id, reminders)

        bot.reply_to(message, f"üß™ –¢–µ—Å—Ç–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n‚è∞ –°—Ä–∞–±–æ—Ç–∞–µ—Ç —á–µ—Ä–µ–∑ 1 –º–∏–Ω—É—Ç—É")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['reminders'])
def handle_reminders(message):
    user_id = message.from_user.id
    reminders = get_user_reminders(user_id)

    if not reminders:
        bot.reply_to(message, "‚è∞ –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    text = "‚è∞ *–í–∞—à–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n"
    now = datetime.datetime.now()

    # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ –≤—Ä–µ–º–µ–Ω–∏
    sorted_reminders = sorted(reminders, key=lambda x: x['datetime'])

    for reminder in sorted_reminders:
        reminder_time = datetime.datetime.strptime(reminder['datetime'], "%Y-%m-%d %H:%M")
        formatted_time = reminder_time.strftime("%d.%m –≤ %H:%M")

        if reminder_time > now:
            status = "üü¢"
        else:
            status = "üî¥"

        text += f"{status} {formatted_time}\nüí¨ {reminder['text']}\n\n"

    bot.reply_to(message, text, parse_mode='Markdown')


# === –ö–û–ú–ê–ù–î–´ –†–ï–ì–£–õ–Ø–†–ù–´–• –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–ô ===

@bot.message_handler(commands=['daily'])
def handle_daily(message):
    try:
        parts = message.text.split(' ', 2)
        if len(parts) < 3:
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /daily 08:00 –¢–µ–∫—Å—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
            return

        time_str = parts[1]
        text = parts[2]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.datetime.strptime(time_str, "%H:%M")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)")
            return

        user_id = message.from_user.id
        start_reminder_thread(user_id)

        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        recurring = {
            'id': str(uuid.uuid4())[:8],
            'type': 'daily',
            'time': time_str,
            'text': text,
            'active': True,
            'created': datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        recurring_list = get_user_recurring(user_id)
        recurring_list.append(recurring)
        save_user_recurring(user_id, recurring_list)

        bot.reply_to(message, f"‚úÖ –ï–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\n‚è∞ –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {time_str}\nüí¨ {text}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['weekly'])
def handle_weekly(message):
    try:
        parts = message.text.split(' ', 3)
        if len(parts) < 4:
            bot.reply_to(message, "‚ùå –§–æ—Ä–º–∞—Ç: /weekly monday 09:00 –¢–µ–∫—Å—Ç")
            return

        day_str = parts[1].lower()
        time_str = parts[2]
        text = parts[3]

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏
        valid_days = ['monday', 'tuesday', 'wednesday', 'thursday', 'friday', 'saturday', 'sunday']
        if day_str not in valid_days:
            bot.reply_to(message, f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –¥–µ–Ω—å –Ω–µ–¥–µ–ª–∏\n–î–æ—Å—Ç—É–ø–Ω—ã–µ: {', '.join(valid_days)}")
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏
        try:
            datetime.datetime.strptime(time_str, "%H:%M")
        except ValueError:
            bot.reply_to(message, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏ (–ß–ß:–ú–ú)")
            return

        user_id = message.from_user.id
        start_reminder_thread(user_id)

        # –°–æ–∑–¥–∞–µ–º –µ–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
        recurring = {
            'id': str(uuid.uuid4())[:8],
            'type': 'weekly',
            'day_of_week': day_str,
            'time': time_str,
            'text': text,
            'active': True,
            'created': datetime.datetime.now().strftime("%d.%m.%Y %H:%M")
        }

        recurring_list = get_user_recurring(user_id)
        recurring_list.append(recurring)
        save_user_recurring(user_id, recurring_list)

        days_ru = {
            'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'wednesday': '—Å—Ä–µ–¥–∞',
            'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'saturday': '—Å—É–±–±–æ—Ç–∞', 'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
        }

        bot.reply_to(message,
                     f"‚úÖ –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ!\nüìÖ –ö–∞–∂–¥—ã–π {days_ru[day_str]} –≤ {time_str}\nüí¨ {text}")

    except Exception as e:
        bot.reply_to(message, f"‚ùå –û—à–∏–±–∫–∞: {str(e)}")


@bot.message_handler(commands=['recurring'])
def handle_recurring(message):
    user_id = message.from_user.id
    recurring_list = get_user_recurring(user_id)

    if not recurring_list:
        bot.reply_to(message, "üîÑ –£ –≤–∞—Å –Ω–µ—Ç —Ä–µ–≥—É–ª—è—Ä–Ω—ã—Ö –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")
        return

    text = "üîÑ *–†–µ–≥—É–ª—è—Ä–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è:*\n\n"

    days_ru = {
        'monday': '–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫', 'tuesday': '–≤—Ç–æ—Ä–Ω–∏–∫', 'wednesday': '—Å—Ä–µ–¥–∞',
        'thursday': '—á–µ—Ç–≤–µ—Ä–≥', 'friday': '–ø—è—Ç–Ω–∏—Ü–∞', 'saturday': '—Å—É–±–±–æ—Ç–∞', 'sunday': '–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
    }

    for recurring in recurring_list:
        status = "üü¢" if recurring.get('active', True) else "üî¥"

        if recurring['type'] == 'daily':
            schedule = f"–∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ {recurring['time']}"
        elif recurring['type'] == 'weekly':
            day_ru = days_ru.get(recurring['day_of_week'], recurring['day_of_week'])
            schedule = f"–∫–∞–∂–¥—ã–π {day_ru} –≤ {recurring['time']}"

        text += f"{status} {schedule}\nüí¨ {recurring['text']}\n\n"

    bot.reply_to(message, text, parse_mode='Markdown')


# === –î–û–ü–û–õ–ù–ò–¢–ï–õ–¨–ù–´–ï –ö–û–ú–ê–ù–î–´ ===

@bot.message_handler(commands=['fact'])
def handle_fact(message):
    facts = [
        "üíß –í–∑—Ä–æ—Å–ª–æ–º—É —á–µ–ª–æ–≤–µ–∫—É –Ω—É–∂–Ω–æ –≤—ã–ø–∏–≤–∞—Ç—å 1.5-2 –ª–∏—Ç—Ä–∞ –≤–æ–¥—ã –≤ –¥–µ–Ω—å",
        "üèÉ 30 –º–∏–Ω—É—Ç —Ñ–∏–∑–∏—á–µ—Å–∫–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏ –≤ –¥–µ–Ω—å —Å–Ω–∏–∂–∞—é—Ç —Ä–∏—Å–∫ –±–æ–ª–µ–∑–Ω–µ–π —Å–µ—Ä–¥—Ü–∞ –Ω–∞ 35%",
        "üò¥ –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Å–æ–Ω 7-9 —á–∞—Å–æ–≤ —É–ª—É—á—à–∞–µ—Ç –ø–∞–º—è—Ç—å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é",
        "ü•ó 5 –ø–æ—Ä—Ü–∏–π –æ–≤–æ—â–µ–π –∏ —Ñ—Ä—É–∫—Ç–æ–≤ –≤ –¥–µ–Ω—å - –æ–ø—Ç–∏–º–∞–ª—å–Ω–∞—è –Ω–æ—Ä–º–∞ –¥–ª—è –∑–¥–æ—Ä–æ–≤—å—è",
        "üßò 10 –º–∏–Ω—É—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –≤ –¥–µ–Ω—å —Å–Ω–∏–∂–∞—é—Ç —É—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –Ω–∞ 23%",
        "üö∂ 10 000 —à–∞–≥–æ–≤ –≤ –¥–µ–Ω—å –ø–æ–º–æ–≥–∞—é—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –Ω–æ—Ä–º–∞–ª—å–Ω—ã–π –≤–µ—Å",
        "üåû 15 –º–∏–Ω—É—Ç –Ω–∞ —Å–æ–ª–Ω—Ü–µ –æ–±–µ—Å–ø–µ—á–∏–≤–∞—é—Ç –¥–Ω–µ–≤–Ω—É—é –Ω–æ—Ä–º—É –≤–∏—Ç–∞–º–∏–Ω–∞ D"
    ]

    fact = random.choice(facts)
    bot.reply_to(message, f"üí° {fact}")


@bot.message_handler(commands=['weather'])
def handle_weather(message):
    bot.reply_to(message, "üå§Ô∏è –û—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã")


def get_weather_info(city):
    """–ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–≥–æ–¥–µ"""
    try:
        url = f'http://api.openweathermap.org/data/2.5/weather?q={city}&appid={OWM_API_KEY}&units=metric&lang=ru'
        response = requests.get(url, timeout=5)

        if response.status_code != 200:
            return "‚ùå –ì–æ—Ä–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω"

        data = response.json()
        temp = data['main']['temp']
        desc = data['weather'][0]['description']
        humidity = data['main']['humidity']
        wind = data['wind']['speed']

        return f"üå§Ô∏è *–ü–æ–≥–æ–¥–∞ –≤ {city}:*\nüå°Ô∏è {temp}¬∞C, {desc}\nüíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\nüí® –í–µ—Ç–µ—Ä: {wind} –º/—Å"

    except Exception as e:
        return "‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–≥–æ–¥—ã"


# === –û–ë–†–ê–ë–û–¢–ß–ò–ö –¢–ï–ö–°–¢–û–í–´–• –°–û–û–ë–©–ï–ù–ò–ô ===

@bot.message_handler(content_types=['text'])
def handle_text(message):
    text = message.text.strip()

    # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ–º–∞–Ω–¥—ã
    if text.startswith('/'):
        bot.reply_to(message, "‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥")
        return

    # –ï—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –∫–æ—Ä–æ—Ç–∫–æ–µ, –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º
    if len(text) < 2:
        return

    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–∞–∫ –∑–∞–ø—Ä–æ—Å –ø–æ–≥–æ–¥—ã
    weather_info = get_weather_info(text)
    bot.reply_to(message, weather_info, parse_mode='Markdown')


# === –ó–ê–ü–£–°–ö –ë–û–¢–ê ===

def main():
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")

    while True:
        try:
            print("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
            bot.polling(non_stop=True, interval=1, timeout=30)
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
            print("üîÑ –ü–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —á–µ—Ä–µ–∑ 5 —Å–µ–∫—É–Ω–¥...")
            time.sleep(5)


if __name__ == "__main__":
    main()